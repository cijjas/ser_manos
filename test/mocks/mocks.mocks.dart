// Mocks generated by Mockito 5.4.6 from annotations
// in ser_manos/test/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:firebase_auth/firebase_auth.dart' as _i2;
import 'package:geolocator/geolocator.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:ser_manos/models/novedad.dart' as _i5;
import 'package:ser_manos/models/user.dart' as _i7;
import 'package:ser_manos/models/volunteering.dart' as _i9;
import 'package:ser_manos/services/auth_service.dart' as _i11;
import 'package:ser_manos/services/novedad_service.dart' as _i3;
import 'package:ser_manos/services/user_service.dart' as _i6;
import 'package:ser_manos/services/volunteering_service.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserCredential_0 extends _i1.SmartFake
    implements _i2.UserCredential {
  _FakeUserCredential_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NovedadService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNovedadService extends _i1.Mock implements _i3.NovedadService {
  @override
  _i4.Future<List<_i5.Novedad>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Novedad>>.value(<_i5.Novedad>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i5.Novedad>>.value(<_i5.Novedad>[]),
      ) as _i4.Future<List<_i5.Novedad>>);

  @override
  _i4.Stream<List<_i5.Novedad>> watchAll() => (super.noSuchMethod(
        Invocation.method(
          #watchAll,
          [],
        ),
        returnValue: _i4.Stream<List<_i5.Novedad>>.empty(),
        returnValueForMissingStub: _i4.Stream<List<_i5.Novedad>>.empty(),
      ) as _i4.Stream<List<_i5.Novedad>>);

  @override
  _i4.Stream<_i5.Novedad> watchOne(String? id) => (super.noSuchMethod(
        Invocation.method(
          #watchOne,
          [id],
        ),
        returnValue: _i4.Stream<_i5.Novedad>.empty(),
        returnValueForMissingStub: _i4.Stream<_i5.Novedad>.empty(),
      ) as _i4.Stream<_i5.Novedad>);
}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i1.Mock implements _i6.UserService {
  @override
  _i4.Future<void> createUser(_i7.User? user) => (super.noSuchMethod(
        Invocation.method(
          #createUser,
          [user],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> postulateToVolunteering(
    _i7.User? user,
    String? id,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #postulateToVolunteering,
          [
            user,
            id,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> withdrawPostulation(
    _i7.User? user,
    String? id,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #withdrawPostulation,
          [
            user,
            id,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> abandonVolunteering(
    _i7.User? user,
    String? id,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #abandonVolunteering,
          [
            user,
            id,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Stream<_i7.UserVolunteering?> watchParticipating(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchParticipating,
          [userId],
        ),
        returnValue: _i4.Stream<_i7.UserVolunteering?>.empty(),
        returnValueForMissingStub: _i4.Stream<_i7.UserVolunteering?>.empty(),
      ) as _i4.Stream<_i7.UserVolunteering?>);

  @override
  _i4.Stream<_i7.User> watchOne(String? id) => (super.noSuchMethod(
        Invocation.method(
          #watchOne,
          [id],
        ),
        returnValue: _i4.Stream<_i7.User>.empty(),
        returnValueForMissingStub: _i4.Stream<_i7.User>.empty(),
      ) as _i4.Stream<_i7.User>);

  @override
  _i4.Future<void> toggleLikeVolunteering(
    _i7.User? user,
    String? id,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #toggleLikeVolunteering,
          [
            user,
            id,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i7.User?> updateUser(_i7.User? user) => (super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [user],
        ),
        returnValue: _i4.Future<_i7.User?>.value(),
        returnValueForMissingStub: _i4.Future<_i7.User?>.value(),
      ) as _i4.Future<_i7.User?>);
}

/// A class which mocks [VolunteeringService].
///
/// See the documentation for Mockito's code generation for more information.
class MockVolunteeringService extends _i1.Mock
    implements _i8.VolunteeringService {
  @override
  _i4.Stream<_i9.Volunteering> watchOne(String? id) => (super.noSuchMethod(
        Invocation.method(
          #watchOne,
          [id],
        ),
        returnValue: _i4.Stream<_i9.Volunteering>.empty(),
        returnValueForMissingStub: _i4.Stream<_i9.Volunteering>.empty(),
      ) as _i4.Stream<_i9.Volunteering>);

  @override
  _i4.Stream<List<_i9.Volunteering>> watchFiltered(
    String? query,
    _i10.Position? userPosition,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchFiltered,
          [
            query,
            userPosition,
          ],
        ),
        returnValue: _i4.Stream<List<_i9.Volunteering>>.empty(),
        returnValueForMissingStub: _i4.Stream<List<_i9.Volunteering>>.empty(),
      ) as _i4.Stream<List<_i9.Volunteering>>);

  @override
  _i4.Future<bool> decrementAvailableSlots(String? id) => (super.noSuchMethod(
        Invocation.method(
          #decrementAvailableSlots,
          [id],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> incrementAvailableSlots(String? id) => (super.noSuchMethod(
        Invocation.method(
          #incrementAvailableSlots,
          [id],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i11.AuthService {
  @override
  _i4.Future<_i2.UserCredential> register(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [
            email,
            password,
          ],
        ),
        returnValue: _i4.Future<_i2.UserCredential>.value(_FakeUserCredential_0(
          this,
          Invocation.method(
            #register,
            [
              email,
              password,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.UserCredential>.value(_FakeUserCredential_0(
          this,
          Invocation.method(
            #register,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i4.Future<_i2.UserCredential>);

  @override
  _i4.Future<_i2.UserCredential> signIn(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signIn,
          [
            email,
            password,
          ],
        ),
        returnValue: _i4.Future<_i2.UserCredential>.value(_FakeUserCredential_0(
          this,
          Invocation.method(
            #signIn,
            [
              email,
              password,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.UserCredential>.value(_FakeUserCredential_0(
          this,
          Invocation.method(
            #signIn,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i4.Future<_i2.UserCredential>);

  @override
  _i4.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
